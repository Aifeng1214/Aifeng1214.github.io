<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>深入理解Java的抽象类和接口</title>
      <link href="/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E7%9A%84%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/"/>
      <url>/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E7%9A%84%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/</url>
      <content type="html"><![CDATA[<p>Java中的抽象类和接口都提供了一种对抽象概念进行定义的机制，从某种方面两者可以替换使用，但是也有一定的差异。<br> <a id="more"></a></p><hr><h2 id="Java抽象类"><a href="#Java抽象类" class="headerlink" title="Java抽象类"></a>Java抽象类</h2><h3 id="抽象类的定义和用途"><a href="#抽象类的定义和用途" class="headerlink" title="抽象类的定义和用途"></a>抽象类的定义和用途</h3><p>当我们规划程序中类的继承层次结构的时候，我们往往需要祖先类<strong>更加通用</strong>，并且只想将它作为派生类的基类，而不想作为或无法作为特定的实体类的时候，可以考虑使用抽象类来。<br>例如，类Animal，因为我们并不方便实例化一个Animal对象；但是我们可以实例化一只Cat、一只Dog、一条Fish；并且作为Animal，所有的Animal都是需要eat的，那么Animal类就可以作为一个抽象类，其中的方法eat可以作为抽象方法。其他继承Animal类的其他子类均需要自己实现eat的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Cat eats fish"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">catchMouse</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cat catches mouse."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dof</span> <span class="keyword">extends</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Dog eats bones"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">guardDoor</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Dog guards the door"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>抽象类中包含一个或多个抽象方法（所以抽象类不能被实例化）</li><li>抽象类中也可以包含具体数据成员和具体方法</li><li>抽象方法只能是public或者protected，如果写成<strong>private</strong>子类就不能继承，父类中又是个空方法没有意义。同样也不能使<strong>final</strong>，final规定子类无法覆盖，这与抽象类的作用矛盾。也不能是<strong>static</strong>，因为多态的特点就是静态方法运行时看父类，而父类是抽象方法没有具体实现这是没有意义的。</li></ul><h3 id="接口的定义和用途"><a href="#接口的定义和用途" class="headerlink" title="接口的定义和用途"></a>接口的定义和用途</h3><p>接口（interface）主要是用来<strong>描述类具有什么样的功能，而不给出每个功能的具体实现</strong>。<br>就上面的Animal类而言，也可以定义成接口，用来描述具有eat这个功能的类（但似乎总感觉怪怪的）。</p><ul><li>接口中所有的方法自动属于public abstract</li><li>接口也可以包含数据成员，全魔设定为public static final</li></ul><h3 id="抽象类和接口的对比"><a href="#抽象类和接口的对比" class="headerlink" title="抽象类和接口的对比"></a>抽象类和接口的对比</h3><h4 id="语法层面上"><a href="#语法层面上" class="headerlink" title="语法层面上"></a>语法层面上</h4><ul><li>[1]抽象类中可以有具体的方法；接口中的方法全部都是public abstrcat。</li><li>[2]抽象类中的数据成员可以是各种类型；接口中的数据成员全是public static final。</li><li>[3]抽象类中可以有静态代码块和静态方法；接口中不能包含静态代码块和静态方法。</li><li>[4]Java中一个类只能继承一个抽象类；但是可以实现多个接口。</li></ul><h4 id="设计层面上"><a href="#设计层面上" class="headerlink" title="设计层面上"></a>设计层面上</h4><p>抽象类是对事物的抽象，比如将Cat、Dog抽象为Animal。派生类和抽象类之间是一种”is a”的关系。<br>接口则是对行为的抽象。实现类和接口之间是一种”like a”的关系。</p><h3 id="一个抽象类和接口的栗子"><a href="#一个抽象类和接口的栗子" class="headerlink" title="一个抽象类和接口的栗子"></a>一个抽象类和接口的栗子</h3><h4 id="门和报警器"><a href="#门和报警器" class="headerlink" title="门和报警器"></a>门和报警器</h4><p>门和警报器的例子：门都有open()和close()两个动作，此时我们可以定义通过抽象类和接口来定义这个抽象概念：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Door</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Door</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这两种实现其实都可以，那现在要门具备报警功能，那就要在抽象类或接口中添加alarm()方法，那么就有问题了</p><ul><li><p>如果放在抽象类中，那么不带报警功能的门也<strong>必须</strong>实现alarm方法，虽然方法body体可以为空但是这种要求对于木门来说是不合理的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Door</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">alarm</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WoodDoor</span> <span class="keyword">extends</span> <span class="title">Door</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;<span class="comment">/* do something*/</span>&#125;;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;<span class="comment">/* do something*/</span>&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// the woodDoor cannot alarm!</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">alarm</span><span class="params">()</span></span>&#123;<span class="comment">/* do something*/</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果放在接口里面，那么其他需要用到报警功能的类就要实现其他open()和close()方法，这对于其他类来说也是不合理的。</p></li></ul><h4 id="合理的做法"><a href="#合理的做法" class="headerlink" title="合理的做法"></a>合理的做法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Door</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Alarm</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">alarm</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlarmDoor</span> <span class="keyword">extends</span> <span class="title">Door</span> <span class="keyword">implements</span> <span class="title">Alarm</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;<span class="comment">/* do something*/</span>&#125;;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;<span class="comment">/* do something*/</span>&#125;;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">alarm</span><span class="params">()</span></span>&#123;<span class="comment">/* do something*/</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="http://blog.csdn.net/chenssy/article/details/12858267" target="_blank" rel="noopener">java提高篇（四）—–抽象类与接口</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI4MDYwMDc3MQ==&amp;mid=2247484787&amp;idx=1&amp;sn=ab6f33d7a93904ff20ac500679fdc29b&amp;chksm=ebb74cdfdcc0c5c94be02a0427e00f8c75298935471e3c6ea9efbf91d0ed8b71657155dd4fac&amp;mpshare=1&amp;scene=1&amp;srcid=04300YGFIEPJLBLZYVvXJztn&amp;key=1d9e023f3de4652574bea1943d6c5702bdb215db4a6c09498662721268e420e2e1396f8539750fe975a04e8053bb65824cc7a862cb4b2257c9ba7177ea65a4a21f2334381a02b72903cf427fbdd0f304&amp;ascene=1&amp;uin=MTU4ODQwMzAwMQ%3D%3D&amp;devicetype=Windows-QQBrowser&amp;version=6103000b&amp;lang=zh_CN&amp;pass_ticket=ZkTyqEuLng%2F7im4adocTxbalrYjuEh9rqP0qSMnCjyWkkjTdGhvON0q3sEFHkASt" target="_blank" rel="noopener">深入理解Java的接口和抽象类</a></li></ul>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Spring实战》阅读笔记——第五章(2)</title>
      <link href="/%E3%80%8ASpring%E5%AE%9E%E6%88%98%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%94%E7%AB%A0(2)/"/>
      <url>/%E3%80%8ASpring%E5%AE%9E%E6%88%98%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%94%E7%AB%A0(2)/</url>
      <content type="html"><![CDATA[<p><a href="https://aifeng1214.github.io/%E3%80%8ASpring%E5%AE%9E%E6%88%98%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%94%E7%AB%A0(1" target="_blank" rel="noopener">《Spring实战》阅读笔记——第五章(1)</a>/)中学习了基本的Spring Web应用程序的构建方法以及Spring的运作方式，接下来继续深入。<br> <a id="more"></a></p><hr><h2 id="测试控制器"><a href="#测试控制器" class="headerlink" title="测试控制器"></a>测试控制器</h2><ul><li>Spring现在包含了一种mock Spring MVC并针对执行HTTP请求的机制，个人理解这仅仅测试了Controller中的RequestMapping。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeControllerTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHomePage</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        HomeController homeController = <span class="keyword">new</span> HomeController();</span><br><span class="line">        MockMvc mockMvc = MockMvcBuilders.standaloneSetup(homeController).build();</span><br><span class="line">        mockMvc.perform(get(<span class="string">"/"</span>)).andExpect(view().name(<span class="string">"home"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：在IDEA中创建项目的时候，pom文件中junit的scope默认是<code>&lt;scope&gt;test&lt;/scope&gt;</code>，那么只有在<code>src/test</code>路径下的测试类才可以使用该依赖，否则会出现无法引用junit.Test的错误。</p>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Spring实战》阅读笔记——第五章(1)</title>
      <link href="/%E3%80%8ASpring%E5%AE%9E%E6%88%98%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%94%E7%AB%A0(1)/"/>
      <url>/%E3%80%8ASpring%E5%AE%9E%E6%88%98%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%94%E7%AB%A0(1)/</url>
      <content type="html"><![CDATA[<p>Spring MVC框架是SpringFrameWork的一部分，用于Java Web应用程序的开发，基于模型-视图-控制器（Model-View-Controller）的模式实现了功能层次的分离与解耦。<br><a id="more"></a></p><hr><h2 id="Spring-MVC起步"><a href="#Spring-MVC起步" class="headerlink" title="Spring MVC起步"></a>Spring MVC起步</h2><h3 id="Spirng-MVC的请求流程"><a href="#Spirng-MVC的请求流程" class="headerlink" title="Spirng MVC的请求流程"></a>Spirng MVC的请求流程</h3><ol><li>请求离开浏览器，第一站是Spring的DispatcherServlet。DispatcherServlet是接收所有请求的前端控制器Servlet。</li><li>DispatcherServlet查询一个或多个处理器映射（handler mapping），来决定请求的下一站去哪里（交给那个控制器）。处理器映射根据请求的URL信息来进行决策。</li><li>确定转发给哪个控制器之后，DispatcherServlet会将请求转发给选中的控制器。</li><li>控制器执行处理逻辑，将请求、模型（产生的数据信息）和视图（数据信息友好方式展示）名再转发给Dispatcher。</li><li>DispatcherServlet使用视图解析器（view resolver）来讲逻辑视图名匹配为一个特定的视图实现。</li><li>DispatcherServlet知道由哪个视图渲染结果，就交付模型数据。</li><li>视图使用模型数据渲染输出，最终将输出通过相应对象传递给客户端。</li></ol><h3 id="搭建Spring-MVC"><a href="#搭建Spring-MVC" class="headerlink" title="搭建Spring MVC"></a>搭建Spring MVC</h3><p>DispatcherServlet是Spring MVC的核心。其配置方式有两种：</p><ul><li>在web.xml中配置</li><li>Spring 3.1之后可以使用Java-based Configuration进行配置</li></ul><p>这里使用Java配置的方式，尽量少用配置文件。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置DispatcherServlet</span></span><br><span class="line"><span class="keyword">package</span> spittr.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpittrWebAppInitializer</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[]&#123;RootConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[]&#123;WebConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">"/"</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="SpittrWebAppInitializer类的解析"><a href="#SpittrWebAppInitializer类的解析" class="headerlink" title="SpittrWebAppInitializer类的解析"></a>SpittrWebAppInitializer类的解析</h4><ul><li>扩展AbstractAnnotationConfigDispatcherServletInitializer的任意类都会自动配置DispatcherServlet和Spring应用上下文，Spring应用上下文会位于应用程序的Servlet上下文之中。</li></ul><blockquote><p>Spring容器并不是只有一个。Spring自带了多个容器的实现，可以归为两种不同的类型。<strong>Bean工厂</strong>（由org.springframekwork.beans.factory.beanFactory接口定义）是最简单的容器，提供基本的DI支持。<strong>应用上下文</strong>（由org.springframekwork.context.ApplicationContext接口定义）…</p></blockquote><ul><li><p>getServletMappings()<br>将一个或多个路径映射到DispatcherServlet上。</p></li><li><p>getServletConfigClasses()<br>WebConfig配置类中主要是内容是启用组件扫描，配置视图解析器，配置静态资源的处理。<br>当DispatcherServlet启动的时候，它会加载Spring应用上下文，并加载配置文件或配置类中所声明的bean。getServletConfigClasses方法返回的带有<strong>@Configuration</strong>注解的类都会用来定义DispatcherServlet应用上下文中的bean；这加载了WebConfig配置类中的bean。</p></li><li><p>getRootConfigClasses()<br>RootConfig配置类加载的是驱动应用后端的中间层和数据层组件，是父上下文。<br>getRootConfigClasses方法返回的带有<strong>@Configuration</strong>注解的类都会用来配置ContextLoaderListener创建的应用上下文中的bean。</p></li><li><p>两个应用上下文<br><a href="https://stackoverflow.com/questions/35258758/getservletconfigclasses-vs-getrootconfigclasses-when-extending-abstractannot" target="_blank" rel="noopener">Stack Overflow上关于这个配置之间的说明</a></p></li></ul><h3 id="启动Spring-MVC"><a href="#启动Spring-MVC" class="headerlink" title="启动Spring MVC"></a>启动Spring MVC</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"spittr.web"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">viewResolver</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            InternalResourceViewResolver resolver = <span class="keyword">new</span> InternalResourceViewResolver();</span><br><span class="line">            resolver.setPrefix(<span class="string">"/WEB-INF/views/"</span>);</span><br><span class="line">            resolver.setSuffix(<span class="string">".jsp"</span>);</span><br><span class="line">            resolver.setExposeContextBeansAsAttributes(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span> resolver;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            configurer.enable();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>@EnableWebMvc<br>启用Spring MVC</p></li><li><p>@ComponentScan(“spittr.web”)<br>扫描spittr.web包，带@Controller注解的控制器都会成为组件扫描时的候选bean。</p></li><li><p>ViewResolve bean<br>这里的resolver被声明为一个bean，在需要的时候会被自动注入。它会查找jsp文件，在查找的时候，在视图名称上加上特定的前缀和后缀。</p></li><li><p>configureDefaultServletHandling方法<br>要求DispatcherServlet将对静态资源的请求转发到Servlet容器默认的Servlet上，而不是DispatcherServlet本身处理这类请求。</p></li></ul><h2 id="基本的控制器"><a href="#基本的控制器" class="headerlink" title="基本的控制器"></a>基本的控制器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"home"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>@Controller<br>声明为一个控制器，可以被@ComponentScan扫描到</p></li><li><p>@RequestMapping<br>URL映射，这里表明请求URL为”/“时且HTTP方法为GET的时候返回名称为home的视图，DispatcherDervlet会要求视图解析器将这个逻辑名称解析为实际的视图。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Spittr&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Welcome to spittr&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>这是/WEB-INF/views/home.jsp的内容，只有一句Welcome。</p><p>需要工程源码的可以去 <a href="https://github.com/Aifeng1214/spittr" target="_blank" rel="noopener">Spittr</a> 获取。</p>]]></content>
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>深入理解Java的多态</title>
      <link href="/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E7%9A%84%E5%A4%9A%E6%80%81/"/>
      <url>/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E7%9A%84%E5%A4%9A%E6%80%81/</url>
      <content type="html"><![CDATA[<p>Java作为一个面向对象的语言，封装、继承和多态是三大特性。封装和继承比较好理解，并且Java摈弃了C++中的多重继承也就更加方便理解了。这里帮助自己回顾一下对于多态的理解。</p><hr><h2 id="Java多态性"><a href="#Java多态性" class="headerlink" title="Java多态性"></a>Java多态性</h2><p>什么是Java的多态性，引用网上的一句总结就是：</p><blockquote><p>事物在运行过程中存在不同的状态。</p></blockquote><p>多态的存在有三个前提：</p><blockquote><ul><li>要有继承关系</li><li>子类要重写(overwrite)父类的方法</li><li>父类引用指向子类对象</li></ul></blockquote><a id="more"></a><hr><h2 id="一个栗子"><a href="#一个栗子" class="headerlink" title="一个栗子"></a>一个栗子</h2><h3 id="父类Animal"><a href="#父类Animal" class="headerlink" title="父类Animal"></a>父类Animal</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"animal eat."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"animal sleep."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"animal run."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子类Cat"><a href="#子类Cat" class="headerlink" title="子类Cat"></a>子类Cat</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">80</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> age = <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写的方法最好写上@Override</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cat eat."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cat sleep."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">catchMouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cat catches mouse."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试工程"><a href="#测试工程" class="headerlink" title="测试工程"></a>测试工程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">80</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> age = <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cat eat."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cat sleep."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">catchMouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cat catches mouse."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输入结果"><a href="#输入结果" class="headerlink" title="输入结果"></a>输入结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat eat.</span><br><span class="line">animal sleep.</span><br><span class="line">animal run.</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure><h3 id="多态的特点"><a href="#多态的特点" class="headerlink" title="多态的特点"></a>多态的特点</h3><blockquote><ul><li><strong>成员变量</strong><br>编译看父类；运行看父类</li><li><strong>成员方法</strong><br>编译看父类；运行看子类（动态绑定）</li><li><strong>静态方法</strong><br>编译看父类；运行看父类</li></ul></blockquote><hr><h2 id="第二个栗子"><a href="#第二个栗子" class="headerlink" title="第二个栗子"></a>第二个栗子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(D obj)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"A and D"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(A obj)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"A and A"</span>);  </span><br><span class="line">    &#125;   </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(B obj)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"B and B"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(A obj)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"B and A"</span>);  </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        A a1 = <span class="keyword">new</span> A();  </span><br><span class="line">        A a2 = <span class="keyword">new</span> B();  </span><br><span class="line">        B b = <span class="keyword">new</span> B();  </span><br><span class="line">        C c = <span class="keyword">new</span> C();  </span><br><span class="line">        D d = <span class="keyword">new</span> D();  </span><br><span class="line">          </span><br><span class="line">        System.out.println(<span class="string">"1--"</span> + a1.show(b));  </span><br><span class="line">        System.out.println(<span class="string">"2--"</span> + a1.show(c));  </span><br><span class="line">        System.out.println(<span class="string">"3--"</span> + a1.show(d));  </span><br><span class="line">        System.out.println(<span class="string">"4--"</span> + a2.show(b));  </span><br><span class="line">        System.out.println(<span class="string">"5--"</span> + a2.show(c));  </span><br><span class="line">        System.out.println(<span class="string">"6--"</span> + a2.show(d));  </span><br><span class="line">        System.out.println(<span class="string">"7--"</span> + b.show(b));  </span><br><span class="line">        System.out.println(<span class="string">"8--"</span> + b.show(c));  </span><br><span class="line">        System.out.println(<span class="string">"9--"</span> + b.show(d));        </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果如下"><a href="#结果如下" class="headerlink" title="结果如下"></a>结果如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>--A and A  </span><br><span class="line"><span class="number">2</span>--A and A  </span><br><span class="line"><span class="number">3</span>--A and D  </span><br><span class="line"><span class="number">4</span>--B and A  </span><br><span class="line"><span class="number">5</span>--B and A  </span><br><span class="line"><span class="number">6</span>--A and D  </span><br><span class="line"><span class="number">7</span>--B and B  </span><br><span class="line"><span class="number">8</span>--B and B  </span><br><span class="line"><span class="number">9</span>--A and D</span><br></pre></td></tr></table></figure><p>第四行输出结果是4–B and A的原因需要明白多态机制的规则，可以总结如下：</p><blockquote><p>继承链中对象方法的调用存在一个优先级：this.show(O)、super.show(O)、this.show((super)O)、super.show((super)O)。</p></blockquote><hr>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
